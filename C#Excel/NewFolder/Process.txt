Expected Process:
	// XmlMedian.XmlParser
	Query user for XML file (Input Validate)
	// XmlMedian.XmlParser
	Parse XML file

	// ExcelMedian.Finder
	Query user for Excel file (Input Validate)
	// Excel Writer (Line 41)
	Loop through Excel file 
		when a column name on row 1 equals a tag contained in XML data (Line 45)
			repeatedly drop down rows until empty row is found ((Line 50) Maybe works?)
			input value inside of XML tag to Excel cell (Line 57, Not implemented)




			using System;
using System.Xml.Linq;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml.Wordprocessing;

namespace Test
{
    internal class Program
    {
        static void Main(string[] args)
        {
            TestXml();
            TestExcel();
        }

        static void TestXml()
        {
            Console.WriteLine("Entering TestXml:\n");
            // Load the XML document
            XDocument xmlDoc = XDocument.Load("C:\\Users\\dersmith\\Downloads\\Test.xml");

            // Access the root <catalog> element
            XElement catalog = xmlDoc.Element("catalog");

            if (xmlDoc.Descendants("catalog").FirstOrDefault() == null)
            {
                Console.Write("is null");
            }

            string tagValue;

            var tag = xmlDoc.Descendants("book").FirstOrDefault();
            tagValue = tag?.Value;

            Console.WriteLine(tagValue);

            Console.WriteLine("Exiting TestXml\n-----\n");

        }

        static void TestExcel()
        {
            Console.WriteLine("Entering TestExcel:\n");
            string excelPath = "C:\\Users\\dersmith\\Documents\\Copy_Of_RequestForm_Mapping.xlsx";

            // Open Excel Spreadsheet from Path and echo content
            using (SpreadsheetDocument doc = SpreadsheetDocument.Open(excelPath, false))
            {
                WorkbookPart workbookPart = doc.WorkbookPart;
                Sheet sheet = workbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(sheet => sheet.Name == "GLOBAL");
                WorksheetPart worksheetPart = (WorksheetPart)workbookPart.GetPartById(sheet.Id);
                SheetData sheetData = worksheetPart.Worksheet.Elements<SheetData>().First();

                /*
                int rowIndex = 1;
                Console.WriteLine("This is the current content of row:" + rowIndex + "\n");
                Row row = sheetData.Elements<Row>().ElementAtOrDefault(rowIndex);
                string cellValue;
                foreach (Cell cell in row.Elements<Cell>())
                {
                    cellValue = GetCellValue(doc, cell);
                    Console.Write(cellValue + "\n");
                }
                */
                Row rowData = sheetData.Elements<Row>().ElementAt(0);
                Cell cellData = rowData.Elements<Cell>().ElementAt(0);
                string cellValue = string.Empty;
                string cellRef;
                // Drop rows until we encounter an empty cell
                for (int row = 0; row < 15; row++)
                {
                    rowData = sheetData.Elements<Row>().ElementAt(row);
                    cellData = rowData.Elements<Cell>().ElementAt(0);
                    cellRef = cellData.CellReference;
                    if (cellData == null)
                    {
                        Console.WriteLine("No cells found in this row");
                    }
                    else
                    {
                        cellValue = GetCellValue(doc, cellData);
                        if (cellValue == "")
                        {
                            Console.WriteLine("\n" + cellData.CellReference + " Cell value is empty ");
                        }
                    }

                    cellValue = GetCellValue(doc, cellData);
                    if (cellValue == "")
                    {
                        Console.WriteLine("\n" + cellData.CellReference + " Cell value is empty ");
                    }
                    Console.WriteLine("Row (" + row + ")Cell reference " + cellData.CellReference + " Cell value: " + cellValue);
                }
                if (doc.CanSave)
                {
                    doc.Save();
                }
                Console.WriteLine("\nExiting TestExcel\n-----\n");
            }
        }

        static string GetCellValue(SpreadsheetDocument doc, Cell cell)
        {
            string value = string.Empty;

            // If the cell is a shared string, get the value from the shared strings table
            if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
            {
                // Extract the index of the shared string
                int index = int.Parse(cell.CellValue.Text);

                // Get the shared string table part
                SharedStringTablePart sharedStringTablePart = doc.WorkbookPart.GetPartsOfType<SharedStringTablePart>().FirstOrDefault();

                if (sharedStringTablePart != null)
                {
                    // Get the actual shared string value using the index
                    value = sharedStringTablePart.SharedStringTable.ElementAt(index).InnerText;
                }
            }
            // If the cell contains a raw value (e.g., a number, date, etc.)
            else if (cell.CellValue != null)
            {
                value = cell.CellValue.Text;
            }

            return value;
        }
    }
}

